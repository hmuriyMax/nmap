package main

import (
	"context"
	"fmt"
	"github.com/Ullaakut/nmap/v2"
	"log"
	api "nmap/pkg/nmap_api"
	"strconv"
)

type GRPCServer struct{}

//Searching for the "vulners" script in all scripts
func getVulnScript(port *nmap.Port) (bool, *nmap.Script) {
	for _, scr := range port.Scripts {
		if scr.ID == "vulners" {
			return true, &scr
		}
	}
	log.Printf("Script not found")
	return false, &nmap.Script{}
}

//Getting the right value by key in []Element
func getByKey(table []nmap.Element, key string) string {
	for _, el := range table {
		if el.Key == key {
			return el.Value
		}
	}
	log.Printf("Nothing found by key %s", key)
	return ""
}

//Parsing Request to make it a runable Scanner
func genScannerFromReqst(req *api.CheckVulnRequest) (*nmap.Scanner, error) {
	targets, tcp_ports := req.GetTargets(), req.GetTcpPort()
	var strPorts string
	//Generating a string in needed format
	for i, el := range tcp_ports {
		if i > 0 {
			strPorts += ", "
		}
		strPorts += fmt.Sprint(el)
	}
	scanner, err := nmap.NewScanner(
		nmap.WithTargets(targets...),
		nmap.WithPorts(strPorts),
		nmap.WithServiceInfo(),
		nmap.WithScripts("vulners"),
	)
	if err != nil {
		return &nmap.Scanner{}, err
	}
	return scanner, nil
}

//Parsing run results to api's Response
func genResponseFromRun(run *nmap.Run) (*api.CheckVulnResponse, error) {
	var res api.CheckVulnResponse
	for _, host := range run.Hosts {
		var nhost api.TargetResult
		nhost.Target = host.Addresses[0].Addr

		for _, serv := range host.Ports {
			var nserv api.Service
			nserv.Name = serv.Service.Product
			nserv.Version = serv.Service.Version
			nserv.TcpPort = int32(serv.ID)
			found, vulnersScript := getVulnScript(&serv)

			if found {
				for _, vuln := range vulnersScript.Tables[0].Tables {
					var nvuln api.Vulnerability
					nvuln.Identifier = getByKey(vuln.Elements, "id")
					float, err := strconv.ParseFloat(getByKey(vuln.Elements, "cvss"), 10)
					if err != nil {
						log.Printf("Formatting error: %s", err)
					} else {
						nvuln.CvssScore = float32(float)
					}
					nserv.Vulns = append(nserv.Vulns, &nvuln)
				}
			}
			nhost.Services = append(nhost.Services, &nserv)
		}
		res.Results = append(res.Results, &nhost)
	}
	return &res, nil
}

// CheckVuln The body of the function, generated by protobuf
func (s *GRPCServer) CheckVuln(_ context.Context, req *api.CheckVulnRequest) (*api.CheckVulnResponse, error) {
	scanner, err := genScannerFromReqst(req)
	if err != nil {
		log.Fatalf("Create error: %s", err)
		return nil, err
	}

	log.Printf("Scan begun")
	run, wrns, err := scanner.Run()
	log.Printf("Scan finished")
	if err != nil {
		log.Fatalf("Running error: %s", err)
		return nil, err
	}
	for i, el := range wrns {
		fmt.Printf("Warning %d:  %s\n", i+1, el)
	}

	log.Printf("Started parsing results")
	res, err := genResponseFromRun(run)
	if err != nil {
		log.Printf("Parsing error: %s", err)
		return nil, err
	}
	log.Printf("Finished parsing results")
	return res, nil
}
